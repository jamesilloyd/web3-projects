{"ast":null,"code":"require('dotenv').config();\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require(\"../contract-abi.json\");\n\nconst contractAddress = \"0x11AacaFde38E182A8879c2D4da99c6245584620D\";\nexport const helloWorldContract = new web3.eth.Contract(contractABI, contractAddress);\nexport const loadCurrentMessage = async () => {\n  const message = await helloWorldContract.methods.message().call();\n  return message;\n};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: \"🦊 You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {};\nexport const updateMessage = async (address, message) => {};","map":{"version":3,"sources":["/Users/heisenberg/Projects/web3/hello-world/react/hello-world-part-four-tutorial/starter-files/src/util/interact.js"],"names":["require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","helloWorldContract","eth","Contract","loadCurrentMessage","message","methods","call","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","getCurrentWalletConnected","updateMessage"],"mappings":"AAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAA/B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAwBN,OAAO,CAAC,oBAAD,CAArC;;AACA,MAAMO,IAAI,GAAGD,iBAAiB,CAACJ,UAAD,CAA9B;;AACA,MAAMM,WAAW,GAAGR,OAAO,CAAC,sBAAD,CAA3B;;AACA,MAAMS,eAAe,GAAG,4CAAxB;AAEA,OAAO,MAAMC,kBAAkB,GAAG,IAAIH,IAAI,CAACI,GAAL,CAASC,QAAb,CAC9BJ,WAD8B,EAE9BC,eAF8B,CAA3B;AAKP,OAAO,MAAMI,kBAAkB,GAAG,YAAY;AAC1C,QAAMC,OAAO,GAAG,MAAMJ,kBAAkB,CAACK,OAAnB,CAA2BD,OAA3B,GAAqCE,IAArC,EAAtB;AACA,SAAOF,OAAP;AAEH,CAJM;AAMP,OAAO,MAAMG,aAAa,GAAG,YAAY;AAErC,MAAIC,MAAM,CAACC,QAAX,EAAqB;AACjB,QAAI;AACF,YAAMC,YAAY,GAAG,MAAMF,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;AACjDC,QAAAA,MAAM,EAAE;AADyC,OAAxB,CAA3B;AAGA,YAAMC,GAAG,GAAG;AACVC,QAAAA,MAAM,EAAE,+CADE;AAEVC,QAAAA,OAAO,EAAEL,YAAY,CAAC,CAAD;AAFX,OAAZ;AAIA,aAAOG,GAAP;AACD,KATD,CASE,OAAOG,GAAP,EAAY;AACZ,aAAO;AACLD,QAAAA,OAAO,EAAE,EADJ;AAELD,QAAAA,MAAM,EAAE,QAAQE,GAAG,CAACZ;AAFf,OAAP;AAID;AACF,GAhBH,MAgBS;AACL,WAAO;AACLW,MAAAA,OAAO,EAAE,EADJ;AAELD,MAAAA,MAAM,EAAG;AAFJ,KAAP;AAIG;AAEV,CAzBM;AA2BP,OAAO,MAAMG,yBAAyB,GAAG,YAAY,CAEpD,CAFM;AAIP,OAAO,MAAMC,aAAa,GAAG,OAAOH,OAAP,EAAgBX,OAAhB,KAA4B,CAExD,CAFM","sourcesContent":["require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x11AacaFde38E182A8879c2D4da99c6245584620D\";\n\nexport const helloWorldContract = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n  );\n\nexport const loadCurrentMessage = async () => { \n    const message = await helloWorldContract.methods.message().call();\n    return message;\n  \n};\n\nexport const connectWallet = async () => {\n\n    if (window.ethereum) {\n        try {\n          const addressArray = await window.ethereum.request({\n            method: \"eth_requestAccounts\",\n          });\n          const obj = {\n            status: \"👆🏽 Write a message in the text-field above.\",\n            address: addressArray[0],\n          };\n          return obj;\n        } catch (err) {\n          return {\n            address: \"\",\n            status: \"😥 \" + err.message,\n          };\n        }\n      } else {\n        return {\n          address: \"\",\n          status: (\"🦊 You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n    \n    ), }; } \n  \n};\n\nexport const getCurrentWalletConnected = async () => {\n  \n};\n\nexport const updateMessage = async (address, message) => {\n  \n};\n"]},"metadata":{},"sourceType":"module"}